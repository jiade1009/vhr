spring:
  datasource:
    type: com.alibaba.druid.pool.DruidDataSource
    username: root
    password: mysql0704
    url: jdbc:mysql://localhost:3306/vhr?useUnicode=true&characterEncoding=UTF-8&serverTimezone=Asia/Shanghai
  rabbitmq:
    username: guest
    password: guest
    host: 127.0.0.1
    # 确认消息已发送到交换机（Exchange）选择确认类型为交互
    # publisher-confirms: true
    publisher-confirms-type: correlated
    publisher-returns: true
    port: 5672
  redis:
    host: 127.0.0.1
    database: 0
    port: 6379
    password: jing2020
  cache:
    cache-names: menus_cache
  jackson:
    ## 格式为yyyy-MM-dd HH:mm:ss
    date-format: yyyy-MM-dd HH:mm:ss
    ## 定时区，解决8小时的时间差问题
    time-zone: GMT+8

server:
  port: 8081
  compression:
    enabled: true
fastdfs:
  nginx:
    host: http://127.0.0.1:8889/
# 日志配置
logging:
  level:
    # web日志
    org.springframework.web: debug
    # security 日志
    org.springframework.security: error
    # mybatis日志
    org.mybatis: info
    org.javaboy.vhr: info
    org.javaboy.vhr.service: debug
    org.javaboy.vhr.task: debug
    org.javaboy.vhr.controller: debug
  charset:
    # 输出控制台编码
    console: UTF-8
    # 输出文件编码
    file: UTF-8
  # 输出文件名及路径，不配置则不输出文件
  file:
    # 切记，该文件表示正在产出日志的日志文件。并不会打包，当文件大于max-file-size,会根据file-name-pattern格式打包
    # 名称为log/ota.log文件夹会在项目根目录下，打包后会在启动包同目录下；名称为/log/ota.log的文件夹会在项目所在磁盘的跟目录下
    name: log/ota.log
  logback:
    rollingpolicy:
      # 单文件的大小，默认10M, 超过之后打包成一个日志文件
      max-file-size: 1MB
      # 日志保存的天数
      max-history: 30
      # 打包文件格式,默认： ${LOG_FILE}.%d{yyyy-MM-dd}.%i.gz,书写格式为：文件路径/文件名.%i.文件后缀,其中%i不可省去，否则无日志显示
      # 例如： 日期为：2021/11/5 ,则打包文件之后为： log/ota.2021-11-05.0.gz,0表示日志的第一部分，后续就是，1,2,3...
      # 如果是压缩包，里面会多一个名log/ota.2021-11-05.0的日志文件
      # 如下面的例子，打包之后为: log/2021-11/ota.2020-11-5.0.log，这是一个日志文件
      file-name-pattern: log/%d{yyyy-MM}/ota.%d{yyyy-MM-dd}.%i.log
#调用python脚本配置
python:
  command: /Library/Frameworks/Python.framework/Versions/3.9/bin/python3
  basePath: /Users/sam/Documents/IdeaProjects/stock
  apiFile: /web/main_api.py
  parameters:
    reloadBasicinfo: load_a_stock

# 定时任务配置
task:
  cron:
    StockMessageSend:
      resend: 0/10 * * * * ?
    MailSend:
      resend: 0/10 * * * * ?